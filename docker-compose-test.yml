services:
  postgres_test:
    image: postgis/postgis:15-3.3
    restart: always
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: postgrespassword
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - test-network

  graphql-engine-test:
    image: hasura/graphql-engine:v2.42.0
    ports:
      - "8081:8080"
    restart: always
    environment:
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgrespassword@postgres_test:5432/postgres
      PG_DATABASE_URL: postgres://postgres:postgrespassword@postgres_test:5432/postgres
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey
      HASURA_GRAPHQL_METADATA_DEFAULTS: '{"backend_configs":{"dataconnector":{"athena":{"uri":"http://data-connector-agent-test:8081/api/v1/athena"},"mariadb":{"uri":"http://data-connector-agent-test:8081/api/v1/mariadb"},"mysql8":{"uri":"http://data-connector-agent-test:8081/api/v1/mysql"},"oracle":{"uri":"http://data-connector-agent-test:8081/api/v1/oracle"},"snowflake":{"uri":"http://data-connector-agent-test:8081/api/v1/snowflake"}}}}'
    depends_on:
      postgres_test:
        condition: service_healthy
      data-connector-agent-test:
        condition: service_healthy
    networks:
      - test-network

  data-connector-agent-test:
    image: hasura/graphql-data-connector:v2.42.0
    restart: always
    ports:
      - "8080:8081"
    environment:
      QUARKUS_LOG_LEVEL: ERROR
      QUARKUS_OPENTELEMETRY_ENABLED: "false"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/v1/athena/health"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 5s
    networks:
      - test-network

  hasura-cli-test:
    build:
      context: .
      dockerfile: Dockerfile
    tty: true
    volumes:
      - .:/app
    environment:
      HASURA_GRAPHQL_ENDPOINT: http://graphql-engine-test:8080
      PG_DATABASE_URL: postgres://postgres:postgrespassword@postgres_test:5432/postgres
      HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey
    working_dir: /app
    command: hasura console --address 0.0.0.0 --console-port 9696
    ports:
      - "9696:9696"
    depends_on:
      graphql-engine-test:
        condition: service_healthy
    networks:
      - test-network

  karate:
    build:
      context: .
      dockerfile: Dockerfile.test
    environment:
      baseUrl: http://graphql-engine-test:8080/v1/graphql
      HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey
    volumes:
      - ./tests/results:/app/target/karate-reports
    depends_on:
      graphql-engine-test:
        condition: service_started
    networks:
      - test-network

volumes:
  db_data:

networks:
  test-network:
    driver: bridge